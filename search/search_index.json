{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"corallium","text":"<p>Shared functionality for the calcipy-ecosystem.</p>"},{"location":"#installation","title":"Installation","text":"<ol> <li> <p><code>poetry add corallium</code></p> </li> <li> <p>Take advantage of the logger or other common functionality</p> <pre><code>form corallium.log import LOGGER\n\nLOGGER.info('Hello!')\n</code></pre> </li> </ol>"},{"location":"#usage","title":"Usage","text":"<p>For more example code, see the scripts directory or the tests.</p>"},{"location":"#project-status","title":"Project Status","text":"<p>See the <code>Open Issues</code> and/or the CODE_TAG_SUMMARY. For release history, see the CHANGELOG.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome pull requests! For your pull request to be accepted smoothly, we suggest that you first open a GitHub issue to discuss your idea. For resources on getting started with the code base, see the below documentation:</p> <ul> <li>DEVELOPER_GUIDE</li> <li>STYLE_GUIDE</li> </ul>"},{"location":"#code-of-conduct","title":"Code of Conduct","text":"<p>We follow the Contributor Covenant Code of Conduct.</p>"},{"location":"#open-source-status","title":"Open Source Status","text":"<p>We try to reasonably meet most aspects of the \u201cOpenSSF scorecard\u201d from Open Source Insights</p>"},{"location":"#responsible-disclosure","title":"Responsible Disclosure","text":"<p>If you have any security issue to report, please contact the project maintainers privately. You can reach us at dev.act.kyle@gmail.com.</p>"},{"location":"#license","title":"License","text":"<p>LICENSE</p>"},{"location":"docs/CHANGELOG/","title":"CHANGELOG","text":""},{"location":"docs/CHANGELOG/#210-2024-11-07","title":"2.1.0 (2024-11-07)","text":""},{"location":"docs/CHANGELOG/#feat","title":"Feat","text":"<ul> <li>add Style.from_dict</li> </ul>"},{"location":"docs/CHANGELOG/#fix","title":"Fix","text":"<ul> <li>support uv.lock and deprecate LOCK</li> </ul>"},{"location":"docs/CHANGELOG/#refactor","title":"Refactor","text":"<ul> <li>reduce usage of beartype.typing</li> <li>resolve lint warnings</li> <li>general cleanup for latest ruff</li> <li>use future.annotations</li> </ul>"},{"location":"docs/CHANGELOG/#201-2024-07-06","title":"2.0.1 (2024-07-06)","text":""},{"location":"docs/CHANGELOG/#201rc0-2024-07-05","title":"2.0.1rc0 (2024-07-05)","text":""},{"location":"docs/CHANGELOG/#fix_1","title":"Fix","text":"<ul> <li>wheel: don\u2019t distribute top-level LICENSE file (#7)</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_1","title":"Refactor","text":"<ul> <li>remove beartype decorator</li> </ul>"},{"location":"docs/CHANGELOG/#200-2024-06-07","title":"2.0.0 (2024-06-07)","text":""},{"location":"docs/CHANGELOG/#fix_2","title":"Fix","text":"<ul> <li>upgrade calcipy to latest and apply changes</li> <li>remove lower case log.logger; use log.LOGGER</li> </ul>"},{"location":"docs/CHANGELOG/#103-2024-06-07","title":"1.0.3 (2024-06-07)","text":""},{"location":"docs/CHANGELOG/#fix_3","title":"Fix","text":"<ul> <li>resolve pylint and ruff warnings</li> <li>copier-auto-update</li> </ul>"},{"location":"docs/CHANGELOG/#102-2024-05-29","title":"1.0.2 (2024-05-29)","text":""},{"location":"docs/CHANGELOG/#fix_4","title":"Fix","text":"<ul> <li>add missing typing-extensions</li> </ul>"},{"location":"docs/CHANGELOG/#101-2024-05-29","title":"1.0.1 (2024-05-29)","text":""},{"location":"docs/CHANGELOG/#fix_5","title":"Fix","text":"<ul> <li>remove depdency on pydantic</li> </ul>"},{"location":"docs/CHANGELOG/#100-2024-04-16","title":"1.0.0 (2024-04-16)","text":""},{"location":"docs/CHANGELOG/#fix_6","title":"Fix","text":"<ul> <li>delegated tasks must accept positional arguments</li> <li>drop Python 3.8</li> </ul>"},{"location":"docs/CHANGELOG/#033-2023-08-13","title":"0.3.3 (2023-08-13)","text":""},{"location":"docs/CHANGELOG/#fix_7","title":"Fix","text":"<ul> <li>correct copier update that broke Python &lt;=3.10 support</li> </ul>"},{"location":"docs/CHANGELOG/#032-2023-08-13","title":"0.3.2 (2023-08-13)","text":""},{"location":"docs/CHANGELOG/#fix_8","title":"Fix","text":"<ul> <li>bump minimum pydantic to avoid beartype c-error</li> <li>remove beartype from lru_cache</li> </ul>"},{"location":"docs/CHANGELOG/#031-2023-08-12","title":"0.3.1 (2023-08-12)","text":""},{"location":"docs/CHANGELOG/#fix_9","title":"Fix","text":"<ul> <li>support beartype.claw type checking</li> </ul>"},{"location":"docs/CHANGELOG/#030-2023-06-21","title":"0.3.0 (2023-06-21)","text":""},{"location":"docs/CHANGELOG/#feat_1","title":"Feat","text":"<ul> <li>add capture shell async</li> </ul>"},{"location":"docs/CHANGELOG/#perf","title":"Perf","text":"<ul> <li>use the logger global instead of the function</li> </ul>"},{"location":"docs/CHANGELOG/#022-2023-05-16","title":"0.2.2 (2023-05-16)","text":""},{"location":"docs/CHANGELOG/#fix_10","title":"Fix","text":"<ul> <li>bump minimum pymdown dependency</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_2","title":"Refactor","text":"<ul> <li>run main task</li> </ul>"},{"location":"docs/CHANGELOG/#021-2023-04-22","title":"0.2.1 (2023-04-22)","text":""},{"location":"docs/CHANGELOG/#fix_11","title":"Fix","text":"<ul> <li>default to \u2018utf-8\u2019 when reading files</li> </ul>"},{"location":"docs/CHANGELOG/#020-2023-04-22","title":"0.2.0 (2023-04-22)","text":""},{"location":"docs/CHANGELOG/#feat_2","title":"Feat","text":"<ul> <li>add structlog and print loggers. Remove not implemented writer</li> </ul>"},{"location":"docs/CHANGELOG/#011-2023-04-07","title":"0.1.1 (2023-04-07)","text":""},{"location":"docs/CHANGELOG/#fix_12","title":"Fix","text":"<ul> <li>reduce rich exception length</li> </ul>"},{"location":"docs/CHANGELOG/#010-2023-02-25","title":"0.1.0 (2023-02-25)","text":""},{"location":"docs/CHANGELOG/#feat_3","title":"Feat","text":"<ul> <li>make Styles configurable</li> </ul>"},{"location":"docs/CHANGELOG/#010rc3-2023-02-24","title":"0.1.0rc3 (2023-02-24)","text":""},{"location":"docs/CHANGELOG/#refactor_3","title":"Refactor","text":"<ul> <li>extract the level lookups to replace singledispatch</li> <li>experiment with singledispatch and extending Styles for tail-jsonl</li> </ul>"},{"location":"docs/CHANGELOG/#010rc2-2023-02-23","title":"0.1.0rc2 (2023-02-23)","text":""},{"location":"docs/CHANGELOG/#fix_13","title":"Fix","text":"<ul> <li>resolve issue with log setup</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_4","title":"Refactor","text":"<ul> <li>move loggers into submodule for reuse and interchangeability</li> <li>merge logic from tail-jsonl</li> <li>experiment with different default log styles</li> </ul>"},{"location":"docs/CHANGELOG/#010rc1-2023-02-22","title":"0.1.0rc1 (2023-02-22)","text":""},{"location":"docs/CHANGELOG/#fix_14","title":"Fix","text":"<ul> <li>raise the minimum calcipy version</li> </ul>"},{"location":"docs/CHANGELOG/#010rc0-2023-02-21","title":"0.1.0rc0 (2023-02-21)","text":""},{"location":"docs/CHANGELOG/#feat_4","title":"Feat","text":"<ul> <li>absorb shoal and calcipy code</li> </ul>"},{"location":"docs/CODE_TAG_SUMMARY/","title":"Collected Code Tags","text":"Type Comment Last Edit Source File TODO Also read the <code>.mise.toml</code> file 2024-10-05 corallium/file_helpers.py:115 PLANNED Refactor so that unsafe_load isn\u2019t necessary: 2023-02-22 corallium/file_helpers.py:166 PLANNED handle carriage returns 2023-02-22 corallium/file_helpers.py:208 TODO Setting the logger to structlog is one way to capture? 2024-10-05 corallium/log.py:39 TODO See below link for other options for chunking 2023-02-22 corallium/pretty_process.py:35 TODO Show an example (screenshots, terminal recording, etc.) &gt; 2023-02-23 docs/README.md:19 <p>Found code tags for TODO (4), PLANNED (2)</p>"},{"location":"docs/DEVELOPER_GUIDE/","title":"Developer Notes","text":""},{"location":"docs/DEVELOPER_GUIDE/#local-development","title":"Local Development","text":"<pre><code>git clone https://github.com/kyleking/corallium.git\ncd corallium\npoetry install --sync\npoetry run calcipy-pack pack.install-extras\n\n# See the available tasks\npoetry run calcipy\n# Or use a local 'run' file (so that 'calcipy' can be extended)\n./run\n\n# Run the default task list (lint, auto-format, test coverage, etc.)\n./run main\n\n# Make code changes and run specific tasks as needed:\n./run lint.fix test\n</code></pre>"},{"location":"docs/DEVELOPER_GUIDE/#publishing","title":"Publishing","text":"<p>For testing, create an account on TestPyPi. Replace <code>...</code> with the API token generated on TestPyPi or PyPi respectively</p> <pre><code>poetry config repositories.testpypi https://test.pypi.org/legacy/\npoetry config pypi-token.testpypi ...\n\n./run main pack.publish --to-test-pypi\n# If you didn't configure a token, you will need to provide your username and password to publish\n</code></pre> <p>To publish to the real PyPi</p> <pre><code>poetry config pypi-token.pypi ...\n./run release\n\n# Or for a pre-release\n./run release --suffix=rc\n</code></pre>"},{"location":"docs/DEVELOPER_GUIDE/#current-status","title":"Current Status","text":"File Statements Missing Excluded Coverage <code>corallium/__init__.py</code> 4 0 0 100.0% <code>corallium/_runtime_type_check_setup.py</code> 12 0 37 100.0% <code>corallium/file_helpers.py</code> 101 41 11 58.7% <code>corallium/log.py</code> 47 1 0 96.1% <code>corallium/loggers/__init__.py</code> 0 0 0 100.0% <code>corallium/loggers/plain_printer.py</code> 5 0 0 100.0% <code>corallium/loggers/rich_printer.py</code> 37 9 0 70.6% <code>corallium/loggers/structlog_logger/__init__.py</code> 3 0 3 100.0% <code>corallium/loggers/structlog_logger/_structlog_logger.py</code> 8 0 0 100.0% <code>corallium/loggers/styles.py</code> 32 4 0 83.3% <code>corallium/pretty_process.py</code> 55 55 0 0.0% <code>corallium/shell.py</code> 42 3 0 91.1% <code>corallium/tomllib.py</code> 3 0 2 100.0% Totals 349 113 53 65.5% <p>Generated on: 2024-11-07</p>"},{"location":"docs/STYLE_GUIDE/","title":"Personal Style Guides","text":""},{"location":"docs/STYLE_GUIDE/#git","title":"Git","text":"<p>We use Commitizen to manage both an auto-generated Changelog and incrementing the release version following semver. For both of these automated outputs to work well, please follow the Conventional Commits style, which is described in more detail below.</p>"},{"location":"docs/STYLE_GUIDE/#commitizen-types-and-scopes","title":"Commitizen Types and Scopes","text":"<p><code>type(scope): description</code></p> <ul> <li>Types<ul> <li>fix: A bug fix</li> <li>feat: A new feature</li> <li>docs: Documentation-only changes (code comments, separate docs)</li> <li>style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons)</li> <li>perf: A code change that improves performance</li> <li>refactor: A change to production code that is not a fix, feat, or perf</li> <li>test: Adding missing or correcting existing tests</li> <li>build: Changes that affect the build system or external dependencies</li> <li>ci: Changes to our CI configuration files and scripts</li> <li>A <code>!</code> can be used to indicate a breaking change (<code>refactor!: drop support for Node 6</code>)</li> <li>SemVer Rules<ul> <li>Based on commit type, the version will be auto-incremented: <code>fix : PATCH // feat : MINOR // BREAKING CHANGE : MAJOR</code></li> </ul> </li> </ul> </li> <li>Scopes<ul> <li>A Class, File name, Issue Number, other appropriate noun. As examples: <code>build(poetry): bump requests to v3</code> or <code>style(#32): add missing type annotations</code></li> </ul> </li> <li>Tips<ul> <li>What if a commit fits multiple types?<ul> <li>Go back and make multiple commits whenever possible. Part of the benefit of Conventional Commits is the focus on more organized and intentional changes</li> </ul> </li> <li>Use <code>git rebase -i</code> to fix commit names prior to merging if incorrect types/scopes are used</li> </ul> </li> </ul>"},{"location":"docs/STYLE_GUIDE/#git-description-guidelines","title":"Git Description Guidelines","text":"<ul> <li>Commit message guidelines<ul> <li>Full sentence with verb (lowercase) and concise description. Below are modified examples for Conventional Commits<ul> <li><code>fix(roles): bug in admin role permissions</code></li> <li><code>feat(ui): implement new button design</code></li> <li><code>build(pip): upgrade package to remove vulnerabilities</code></li> <li><code>refactor: file structure to improve code readability</code></li> <li><code>perf(cli): rewrite methods</code></li> <li><code>feat(api): endpoints to implement new customer dashboard</code></li> </ul> </li> </ul> </li> <li>How to write a good commit message<ul> <li>A diff will tell you what changed, but only the commit message can properly tell you why.</li> <li>Keep in mind: This has all been said before.</li> <li>From the seven rules of a great Git commit message:<ul> <li>(2) Try for 50 characters, but consider 72 the hard limit</li> <li>(7) Use the body to explain what and why vs. how</li> </ul> </li> </ul> </li> </ul>"},{"location":"docs/STYLE_GUIDE/#issue-labels-and-milestones","title":"Issue Labels and Milestones","text":"<p>Personal Guide</p> <ul> <li>For Issue Labels, see [labels.yml][labels]</li> <li>Milestones<ul> <li>Current Tasks: main milestone (name could change based on a specific project, sprint, or month)</li> <li>Next Tasks</li> <li>Blue Sky</li> </ul> </li> </ul> Research <ul> <li>[Sane GitHub Labels](https://medium.com/@dave_lunny/sane-github-labels-c5d2e6004b63) and see [sensible-github-labels](https://github.com/Relequestual/sensible-github-labels) for full descriptions of each</li> <ul> <li>\u201cit is much more helpful to see the status and type of all issues at a glance.\u201d</li> <li>One of each:</li> <ul> <li>Status: \u2026</li> <ul><li>Abandoned, Accepted, Available, Blocked, Completed, In Progress, On Hold, Pending, Review Needed, Revision Needed</li></ul> <li>Type: \u2026</li> <ul><li>Bug, Maintenance, Question, Enhancement</li></ul> <li>Priority: \u2026</li> <ul><li>Critical, High, Medium, Low</li></ul> </ul> </ul> <li>[Britecharts](https://britecharts.github.io/britecharts/github-labels.html)</li> <ul> <li>Status: \u2026</li> <ul> <li>On Review \u2013 Request that we are pondering if including or not</li> <li>Needs Reproducing \u2013 For bugs that need to be reproduced in order to get fixed</li> <li>Needs Design \u2013 Feature that needs a design</li> <li>Ready to Go \u2013 Issue that has been defined and is ready to get started with</li> <li>In Progress \u2013 Issue that is being worked on right now.</li> <li>Completed \u2013 Finished feature or fix</li> </ul> <li>Type: \u2026</li> <ul> <li>Bug \u2013 An unexpected problem or unintended behavior</li> <li>Feature \u2013 A new feature request</li> <li>Maintenance \u2013 A regular maintenance chore or task, including refactors, build system, CI, performance improvements</li> <li>Documentation \u2013 A documentation improvement task</li> <li>Question \u2013 An issue or PR that needs more information or a user question</li> </ul> <li>Not Included</li> <ul> <li>Priority: They would add complexity and overhead due to the discussions, but could help with the roadmap</li> <li>Technology Labels: It can create too much overhead, as properly tag with technologies all the issues could be time consuming</li> </ul> </ul> </ul> <li>[Ian Bicking Blog](https://www.ianbicking.org/blog/2014/03/use-github-issues-to-organize-a-project.html)</li> <ul> <li>Milestone Overview</li> <ul> <li>What are we doing right now?</li> <li>What aren\u2019t we doing right now?</li> <ul> <li>2a. Stuff we\u2019ll probably do soon</li> <li>2b. Stuff we probably won\u2019t do soon</li> </ul> <li>What aren\u2019t we sure about?</li> </ul> <li>Milestone Descriptions</li> <ul> <li>Stuff we are doing right now: this is the \u201cmain\u201d milestone. We give it a name (like Alpha 2 or Strawberry Rhubarb Pie) and we write down what we are trying to accomplish with the milestone. We create a new milestone when we are ready for the next iteration.</li> <li>Stuff we\u2019ll probably do soon: this is a standing \u201c**Next Tasks**\u201d milestone. We never change or rename this milestone.</li> <ul><li>We use a permanent \u201cNext Tasks\u201d milestone (as opposed to renaming it to \u201cAlpha 3\u201d or actual-next-iteration milestone) because we don\u2019t want to presume or default to including something in the real next iteration. When we\u2019re ready to start planning the next iteration we\u2019ll create a new milestone, and only deliberately move things into that milestone.</li></ul> <li>Stuff we probably won\u2019t do soon: this is a standing \u201c**Blue Sky**\u201d milestone. We refer to these tickets and sometimes look through them, but they are easy to ignore, somewhat intentionally ignored.</li> <li>What aren\u2019t we sure about?: issues with no milestone.</li> </ul> <li>Label: \u201cNeeds Discussion\u201d - (addressed in a triage meeting) - use liberally for either big or small tickets</li> <li>\u201cIt\u2019s better to give people more power: it\u2019s actually helpful if people can overreach because it is an opportunity to establish where the limits really are and what purpose those limits have\u201d</li> </ul>"},{"location":"docs/STYLE_GUIDE/#external-links","title":"External Links","text":"<ul> <li>[Git: The Simple Guide][simple_git]</li> <li>[Commit Messages][gcmsg] and why use the present tense</li> <li>GitHub\u2019s Advice on GitHub</li> <li>Most Comprehensive Guide</li> <li>Git Pro Book (free)<ul> <li>Bash Tab-Completion Snippet</li> </ul> </li> </ul>"},{"location":"docs/STYLE_GUIDE/#python","title":"Python","text":"<ul> <li>Python Style Guides<ul> <li>https://gist.github.com/sloria/7001839</li> <li>http://www.nilunder.com/blog/2013/08/03/pythonic-sensibilities/</li> <li>https://innoq.github.io/cards42org_en/</li> <li>https://docs.openstack.org/hacking/latest/user/hacking.html#styleguide</li> <li>https://www.python.org/doc/humor/</li> <li>https://docs.python-guide.org/writing/reading/</li> <li>https://realpython.com/python-refactoring/</li> </ul> </li> </ul>"},{"location":"docs/STYLE_GUIDE/#adrs","title":"ADRs","text":"<ul> <li>ADR Approaches<ul> <li>https://infraeng.dev/tech-spec Template (And associated review) vs. https://infraeng.dev/decision-log/</li> <li>Y-Statements: abbreviated shorthand. Add this as a one-line decision option if a full ADR isn\u2019t needed (or when referencing an existing ADR) (https://scribe.rip/@docsoc/y-statements-10eb07b5a177)</li> <li>https://adr.github.io</li> <li>More formal implementation of ADRs (MADR) that this is based on. Template: https://github.com/adr/madr/blob/97fb8edec60b8dc70b8166ef62de34c4e26b46c0/template/adr-template.md</li> <li>https://github.com/ethereum/EIPs/blob/confluenceuser/EIPS/eip-5639.md</li> </ul> </li> <li>Examples<ul> <li>https://github.com/pawamoy/mkdocstrings/issues/28</li> <li>https://github.com/arachne-framework/architecture/blob/060a956277a5ad71df93da49fee52463408841af/adr-002-configuration.md</li> <li>https://github.com/arachne-framework/architecture/tree/060a956277a5ad71df93da49fee52463408841af</li> <li>https://github.com/ethereum/EIPs/blob/confluenceuser/EIPS/eip-1010.md</li> <li>https://docs-v1.prefect.io/core/pins/pin-01-introduce-pins.html</li> <li>https://peps.python.org/pep-0387/</li> <li>https://github.com/AICoE/aicoe-ci/blob/39de02af86a0d1f9dcd395fa88b858f1c6880411/docs/adr/0000-use-markdown-architectural-decision-records.md</li> <li>And many others!</li> </ul> </li> </ul> <p>&lt;\u2013 Links \u2013&gt;</p>"},{"location":"reference/corallium/file_helpers/","title":"File helpers","text":"<p>File Helpers.</p>"},{"location":"reference/corallium/file_helpers/#corallium.file_helpers-attributes","title":"Attributes","text":""},{"location":"reference/corallium/file_helpers/#corallium.file_helpers.ALLOWED_CHARS","title":"ALLOWED_CHARS  <code>module-attribute</code>","text":"<pre><code>ALLOWED_CHARS = ascii_lowercase + ascii_uppercase + digits + '-_.'\n</code></pre> <p>Default string of acceptable characters in a filename.</p>"},{"location":"reference/corallium/file_helpers/#corallium.file_helpers.COPIER_ANSWERS","title":"COPIER_ANSWERS  <code>module-attribute</code>","text":"<pre><code>COPIER_ANSWERS = Path('.copier-answers.yml')\n</code></pre> <p>Copier Answer file name.</p>"},{"location":"reference/corallium/file_helpers/#corallium.file_helpers.LOCK","title":"LOCK  <code>module-attribute</code>","text":"<pre><code>LOCK = get_lock()\n</code></pre> <p>Deprecated path to lock file.</p>"},{"location":"reference/corallium/file_helpers/#corallium.file_helpers.MKDOCS_CONFIG","title":"MKDOCS_CONFIG  <code>module-attribute</code>","text":"<pre><code>MKDOCS_CONFIG = Path('mkdocs.yml')\n</code></pre> <p>mkdocs.yml Path.</p>"},{"location":"reference/corallium/file_helpers/#corallium.file_helpers.PROJECT_TOML","title":"PROJECT_TOML  <code>module-attribute</code>","text":"<pre><code>PROJECT_TOML = Path('pyproject.toml')\n</code></pre> <p>pyproject.toml Path.</p>"},{"location":"reference/corallium/file_helpers/#corallium.file_helpers-functions","title":"Functions","text":""},{"location":"reference/corallium/file_helpers/#corallium.file_helpers.delete_dir","title":"delete_dir","text":"<pre><code>delete_dir(dir_path)\n</code></pre> <p>Delete the specified directory from a doit task.</p> PARAMETER DESCRIPTION <code>dir_path</code> <p>Path to directory to delete</p> <p> TYPE: <code>Path</code> </p> Source code in <code>corallium/file_helpers.py</code> <pre><code>def delete_dir(dir_path: Path) -&gt; None:\n    \"\"\"Delete the specified directory from a doit task.\n\n    Args:\n        dir_path: Path to directory to delete\n\n    \"\"\"\n    if dir_path.is_dir():\n        LOGGER.text('Deleting', dir_path=dir_path)\n        shutil.rmtree(dir_path)\n</code></pre>"},{"location":"reference/corallium/file_helpers/#corallium.file_helpers.delete_old_files","title":"delete_old_files","text":"<pre><code>delete_old_files(dir_path, *, ttl_seconds)\n</code></pre> <p>Delete old files within the specified directory.</p> PARAMETER DESCRIPTION <code>dir_path</code> <p>Path to directory to delete</p> <p> TYPE: <code>Path</code> </p> <code>ttl_seconds</code> <p>if last modified within this number of seconds, will not be deleted</p> <p> TYPE: <code>int</code> </p> Source code in <code>corallium/file_helpers.py</code> <pre><code>def delete_old_files(dir_path: Path, *, ttl_seconds: int) -&gt; None:\n    \"\"\"Delete old files within the specified directory.\n\n    Args:\n        dir_path: Path to directory to delete\n        ttl_seconds: if last modified within this number of seconds, will not be deleted\n\n    \"\"\"\n    for pth in dir_path.rglob('*'):\n        if pth.is_file() and (time.time() - pth.stat().st_mtime) &gt; ttl_seconds:\n            pth.unlink()\n</code></pre>"},{"location":"reference/corallium/file_helpers/#corallium.file_helpers.ensure_dir","title":"ensure_dir","text":"<pre><code>ensure_dir(dir_path)\n</code></pre> <p>Make sure that the specified dir_path exists and create any missing folders from a doit task.</p> PARAMETER DESCRIPTION <code>dir_path</code> <p>Path to directory that needs to exists</p> <p> TYPE: <code>Path</code> </p> Source code in <code>corallium/file_helpers.py</code> <pre><code>def ensure_dir(dir_path: Path) -&gt; None:\n    \"\"\"Make sure that the specified dir_path exists and create any missing folders from a doit task.\n\n    Args:\n        dir_path: Path to directory that needs to exists\n\n    \"\"\"\n    LOGGER.text('Creating', dir_path=dir_path)\n    dir_path.mkdir(parents=True, exist_ok=True)\n</code></pre>"},{"location":"reference/corallium/file_helpers/#corallium.file_helpers.find_in_parents","title":"find_in_parents","text":"<pre><code>find_in_parents(*, name, cwd=None)\n</code></pre> <p>Return path to specific file by recursively searching in cwd and parents.</p> RAISES DESCRIPTION <code>FileNotFoundError</code> <p>if not found</p> Source code in <code>corallium/file_helpers.py</code> <pre><code>def find_in_parents(*, name: str, cwd: Path | None = None) -&gt; Path:\n    \"\"\"Return path to specific file by recursively searching in cwd and parents.\n\n    Raises:\n        FileNotFoundError: if not found\n\n    \"\"\"\n    msg = f'Could not locate {name} in {cwd} or in any parent directory'\n    start_path = (cwd or Path()).resolve() / name\n    try:\n        while not start_path.is_file():\n            start_path = start_path.parents[1] / name\n    except IndexError:\n        raise FileNotFoundError(msg) from None\n    return start_path\n</code></pre>"},{"location":"reference/corallium/file_helpers/#corallium.file_helpers.get_lock","title":"get_lock  <code>cached</code>","text":"<pre><code>get_lock()\n</code></pre> <p>Return path to dependency manager\u2019s lock file.</p> RAISES DESCRIPTION <code>FileNotFoundError</code> <p>if a lock file can\u2019t be located</p> Source code in <code>corallium/file_helpers.py</code> <pre><code>@lru_cache(maxsize=1)\ndef get_lock() -&gt; Path:\n    \"\"\"Return path to dependency manager's lock file.\n\n    Raises:\n        FileNotFoundError: if a lock file can't be located\n\n    \"\"\"\n    for pth in map(Path, ('uv.lock', 'poetry.lock')):\n        if pth.is_file():\n            return pth\n    raise FileNotFoundError('Could not locate a known lock file type')\n</code></pre>"},{"location":"reference/corallium/file_helpers/#corallium.file_helpers.get_relative","title":"get_relative","text":"<pre><code>get_relative(full_path, other_path)\n</code></pre> <p>Try to return the relative path between the two paths. None if no match.</p> PARAMETER DESCRIPTION <code>full_path</code> <p>the full path to use</p> <p> TYPE: <code>Path</code> </p> <code>other_path</code> <p>the path that the full_path may be relative to</p> <p> TYPE: <code>Path</code> </p> RETURNS DESCRIPTION <code>Path | None</code> <p>relative path</p> Source code in <code>corallium/file_helpers.py</code> <pre><code>def get_relative(full_path: Path, other_path: Path) -&gt; Path | None:\n    \"\"\"Try to return the relative path between the two paths. None if no match.\n\n    Args:\n        full_path: the full path to use\n        other_path: the path that the full_path may be relative to\n\n    Returns:\n        relative path\n\n    \"\"\"\n    with suppress(ValueError):\n        return full_path.relative_to(other_path)\n    return None\n</code></pre>"},{"location":"reference/corallium/file_helpers/#corallium.file_helpers.get_tool_versions","title":"get_tool_versions","text":"<pre><code>get_tool_versions(cwd=None)\n</code></pre> <p>Return versions from <code>.tool-versions</code> file.</p> Source code in <code>corallium/file_helpers.py</code> <pre><code>def get_tool_versions(cwd: Path | None = None) -&gt; dict[str, list[str]]:\n    \"\"\"Return versions from `.tool-versions` file.\"\"\"\n    tv_path = find_in_parents(name='.tool-versions', cwd=cwd)\n    return {line.split(' ')[0]: line.split(' ')[1:] for line in tv_path.read_text().splitlines()}\n</code></pre>"},{"location":"reference/corallium/file_helpers/#corallium.file_helpers.if_found_unlink","title":"if_found_unlink","text":"<pre><code>if_found_unlink(path_file)\n</code></pre> <p>Remove file if it exists. Function is intended to a doit action.</p> PARAMETER DESCRIPTION <code>path_file</code> <p>Path to file to remove</p> <p> TYPE: <code>Path</code> </p> Source code in <code>corallium/file_helpers.py</code> <pre><code>def if_found_unlink(path_file: Path) -&gt; None:\n    \"\"\"Remove file if it exists. Function is intended to a doit action.\n\n    Args:\n        path_file: Path to file to remove\n\n    \"\"\"\n    if path_file.is_file():\n        LOGGER.text('Deleting', path_file=path_file)\n        path_file.unlink()\n</code></pre>"},{"location":"reference/corallium/file_helpers/#corallium.file_helpers.open_in_browser","title":"open_in_browser","text":"<pre><code>open_in_browser(path_file)\n</code></pre> <p>Open the path in the default web browser.</p> PARAMETER DESCRIPTION <code>path_file</code> <p>Path to file</p> <p> TYPE: <code>Path</code> </p> Source code in <code>corallium/file_helpers.py</code> <pre><code>def open_in_browser(path_file: Path) -&gt; None:  # pragma: no cover\n    \"\"\"Open the path in the default web browser.\n\n    Args:\n        path_file: Path to file\n\n    \"\"\"\n    webbrowser.open(path_file.resolve().as_uri())\n</code></pre>"},{"location":"reference/corallium/file_helpers/#corallium.file_helpers.read_lines","title":"read_lines","text":"<pre><code>read_lines(path_file, encoding='utf-8', errors=None)\n</code></pre> <p>Read a file and split on newlines for later parsing.</p> PARAMETER DESCRIPTION <code>path_file</code> <p>path to the file</p> <p> TYPE: <code>Path</code> </p> <code>encoding</code> <p>defaults to \u2018utf-8\u2019</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>'utf-8'</code> </p> <code>errors</code> <p>defaults to None. Use \u2018ignore\u2019 if needed. Full documentation: https://docs.python.org/3.12/library/functions.html#open</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>List[str]: lines of text as list</p> Source code in <code>corallium/file_helpers.py</code> <pre><code>def read_lines(path_file: Path, encoding: str | None = 'utf-8', errors: str | None = None) -&gt; list[str]:\n    \"\"\"Read a file and split on newlines for later parsing.\n\n    Args:\n        path_file: path to the file\n        encoding: defaults to 'utf-8'\n        errors: defaults to None. Use 'ignore' if needed. Full documentation: https://docs.python.org/3.12/library/functions.html#open\n\n    Returns:\n        List[str]: lines of text as list\n\n    \"\"\"\n    return path_file.read_text(encoding=encoding, errors=errors).splitlines() if path_file.is_file() else []\n</code></pre>"},{"location":"reference/corallium/file_helpers/#corallium.file_helpers.read_package_name","title":"read_package_name  <code>cached</code>","text":"<pre><code>read_package_name(cwd=None)\n</code></pre> <p>Return the package name.</p> Source code in <code>corallium/file_helpers.py</code> <pre><code>@lru_cache(maxsize=5)\ndef read_package_name(cwd: Path | None = None) -&gt; str:\n    \"\"\"Return the package name.\"\"\"\n    poetry_config = read_pyproject(cwd=cwd)\n    return str(poetry_config['tool']['poetry']['name'])\n</code></pre>"},{"location":"reference/corallium/file_helpers/#corallium.file_helpers.read_pyproject","title":"read_pyproject  <code>cached</code>","text":"<pre><code>read_pyproject(cwd=None)\n</code></pre> <p>Return the \u2018pyproject.toml\u2019 file contents.</p> RAISES DESCRIPTION <code>FileNotFoundError</code> <p>if not found</p> Source code in <code>corallium/file_helpers.py</code> <pre><code>@lru_cache(maxsize=5)\ndef read_pyproject(cwd: Path | None = None) -&gt; Any:\n    \"\"\"Return the 'pyproject.toml' file contents.\n\n    Raises:\n        FileNotFoundError: if not found\n\n    \"\"\"\n    toml_path = find_in_parents(name='pyproject.toml', cwd=cwd)\n    try:\n        pyproject_txt = toml_path.read_text(encoding='utf-8')\n    except Exception as exc:\n        msg = f'Could not locate: {toml_path}'\n        raise FileNotFoundError(msg) from exc\n    return tomllib.loads(pyproject_txt)  # pyright: ignore[reportAttributeAccessIssue]\n</code></pre>"},{"location":"reference/corallium/file_helpers/#corallium.file_helpers.read_yaml_file","title":"read_yaml_file","text":"<pre><code>read_yaml_file(path_yaml)\n</code></pre> <p>Attempt to read the specified yaml file. Returns an empty dictionary if not found or a parser error occurs.</p> <p>Note: suppresses all tags in the YAML file</p> PARAMETER DESCRIPTION <code>path_yaml</code> <p>path to the yaml file</p> <p> TYPE: <code>Path</code> </p> RETURNS DESCRIPTION <code>Any</code> <p>dictionary representation of the source file</p> RAISES DESCRIPTION <code>RuntimeError</code> <p>when yaml dependency is missing</p> Source code in <code>corallium/file_helpers.py</code> <pre><code>def read_yaml_file(path_yaml: Path) -&gt; Any:\n    \"\"\"Attempt to read the specified yaml file. Returns an empty dictionary if not found or a parser error occurs.\n\n    &gt; Note: suppresses all tags in the YAML file\n\n    Args:\n        path_yaml: path to the yaml file\n\n    Returns:\n        dictionary representation of the source file\n\n    Raises:\n        RuntimeError: when yaml dependency is missing\n\n    \"\"\"\n    try:\n        import yaml  # noqa: PLC0415 # lazy-load the optional dependency\n    except ImportError as exc:\n        raise RuntimeError(\"The 'calcipy[docs]' extras are missing\") from exc\n\n    # PLANNED: Refactor so that unsafe_load isn't necessary:\n    #   read_text; remove any line containing ': !!python'; then yaml.loag\n\n    # Based on: https://github.com/yaml/pyyaml/issues/86#issuecomment-380252434\n    yaml.add_multi_constructor('', lambda _loader, _suffix, _node: None)\n    yaml.add_multi_constructor('!', lambda _loader, _suffix, _node: None)\n    yaml.add_multi_constructor('!!', lambda _loader, _suffix, _node: None)\n    try:\n        return yaml.unsafe_load(path_yaml.read_text())\n    except (FileNotFoundError, KeyError) as exc:  # pragma: no cover\n        LOGGER.warning('Unexpected read error', path_yaml=path_yaml, error=str(exc))\n        return {}\n    except yaml.constructor.ConstructorError:\n        LOGGER.exception('Warning: burying poorly handled yaml error')\n        return {}\n</code></pre>"},{"location":"reference/corallium/file_helpers/#corallium.file_helpers.sanitize_filename","title":"sanitize_filename","text":"<pre><code>sanitize_filename(filename, repl_char='_', allowed_chars=ALLOWED_CHARS)\n</code></pre> <p>Replace all characters not in the <code>allow_chars</code> with <code>repl_char</code>.</p> PARAMETER DESCRIPTION <code>filename</code> <p>string filename (stem and suffix only)</p> <p> TYPE: <code>str</code> </p> <code>repl_char</code> <p>replacement character. Default is <code>_</code></p> <p> TYPE: <code>str</code> DEFAULT: <code>'_'</code> </p> <code>allowed_chars</code> <p>all allowed characters. Default is <code>ALLOWED_CHARS</code></p> <p> TYPE: <code>str</code> DEFAULT: <code>ALLOWED_CHARS</code> </p> RETURNS DESCRIPTION <code>str</code> <p>sanitized filename</p> <p> TYPE: <code>str</code> </p> Source code in <code>corallium/file_helpers.py</code> <pre><code>def sanitize_filename(filename: str, repl_char: str = '_', allowed_chars: str = ALLOWED_CHARS) -&gt; str:\n    \"\"\"Replace all characters not in the `allow_chars` with `repl_char`.\n\n    Args:\n        filename: string filename (stem and suffix only)\n        repl_char: replacement character. Default is `_`\n        allowed_chars: all allowed characters. Default is `ALLOWED_CHARS`\n\n    Returns:\n        str: sanitized filename\n\n    \"\"\"\n    return ''.join((char if char in allowed_chars else repl_char) for char in filename)\n</code></pre>"},{"location":"reference/corallium/file_helpers/#corallium.file_helpers.tail_lines","title":"tail_lines","text":"<pre><code>tail_lines(path_file, *, count)\n</code></pre> <p>Tail a file for up to the last count (or full file) lines.</p> <p>Based on: https://stackoverflow.com/a/54278929</p> <p>Tip: <code>file_size = fh.tell()</code> -or- <code>os.fstat(fh.fileno()).st_size</code> -or- return from <code>fh.seek(0, os.SEEK_END)</code></p> PARAMETER DESCRIPTION <code>path_file</code> <p>path to the file</p> <p> TYPE: <code>Path</code> </p> <code>count</code> <p>maximum number of lines to return</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>List[str]: lines of text as list</p> Source code in <code>corallium/file_helpers.py</code> <pre><code>def tail_lines(path_file: Path, *, count: int) -&gt; list[str]:\n    \"\"\"Tail a file for up to the last count (or full file) lines.\n\n    Based on: https://stackoverflow.com/a/54278929\n\n    &gt; Tip: `file_size = fh.tell()` -or- `os.fstat(fh.fileno()).st_size` -or- return from `fh.seek(0, os.SEEK_END)`\n\n    Args:\n        path_file: path to the file\n        count: maximum number of lines to return\n\n    Returns:\n        List[str]: lines of text as list\n\n    \"\"\"\n    with path_file.open('rb') as f_h:\n        rem_bytes = f_h.seek(0, os.SEEK_END)\n        step_size = 1  # Initially set to 1 so that the last byte is read\n        found_lines = 0\n        while found_lines &lt; count and rem_bytes &gt;= step_size:\n            rem_bytes = f_h.seek(-1 * step_size, os.SEEK_CUR)\n            if f_h.read(1) == b'\\n':\n                found_lines += 1\n            step_size = 2  # Increase so that repeats(read 1 / back 2)\n\n        if rem_bytes &lt; step_size:\n            f_h.seek(0, os.SEEK_SET)\n        return [line.rstrip('\\r') for line in f_h.read().decode().split('\\n')]\n</code></pre>"},{"location":"reference/corallium/file_helpers/#corallium.file_helpers.trim_trailing_whitespace","title":"trim_trailing_whitespace","text":"<pre><code>trim_trailing_whitespace(pth)\n</code></pre> <p>Trim trailing whitespace from the specified file.</p> <p>PLANNED: handle carriage returns</p> Source code in <code>corallium/file_helpers.py</code> <pre><code>def trim_trailing_whitespace(pth: Path) -&gt; None:\n    \"\"\"Trim trailing whitespace from the specified file.\n\n    PLANNED: handle carriage returns\n\n    \"\"\"\n    line_break = '\\n'\n    stripped = [line.rstrip(' ') for line in pth.read_text().split(line_break)]\n    pth.write_text(line_break.join(stripped))\n</code></pre>"},{"location":"reference/corallium/log/","title":"Log","text":"<p>Log.</p>"},{"location":"reference/corallium/log/#corallium.log-classes","title":"Classes","text":""},{"location":"reference/corallium/log/#corallium.log.LogCallable","title":"LogCallable","text":"<p>               Bases: <code>Protocol</code></p> <p>Defined the kwargs accepted for a delegated task.</p> Source code in <code>corallium/log.py</code> <pre><code>@runtime_checkable\nclass LogCallable(Protocol):\n    \"\"\"Defined the kwargs accepted for a delegated task.\"\"\"\n\n    def __call__(\n        self,\n        message: str,\n        *,\n        is_header: bool,\n        _this_level: int,\n        _is_text: bool,\n    ) -&gt; Any:\n        \"\"\"Type-checked arguments.\"\"\"\n</code></pre>"},{"location":"reference/corallium/log/#corallium.log.LogCallable-functions","title":"Functions","text":""},{"location":"reference/corallium/log/#corallium.log.LogCallable.__call__","title":"__call__","text":"<pre><code>__call__(message, *, is_header, _this_level, _is_text)\n</code></pre> <p>Type-checked arguments.</p> Source code in <code>corallium/log.py</code> <pre><code>def __call__(\n    self,\n    message: str,\n    *,\n    is_header: bool,\n    _this_level: int,\n    _is_text: bool,\n) -&gt; Any:\n    \"\"\"Type-checked arguments.\"\"\"\n</code></pre>"},{"location":"reference/corallium/log/#corallium.log-functions","title":"Functions","text":""},{"location":"reference/corallium/log/#corallium.log.configure_logger","title":"configure_logger","text":"<pre><code>configure_logger(*, log_level=DEF_LEVEL, logger=None, **kwargs)\n</code></pre> <p>Configure the global log level or replace the logger.</p> Source code in <code>corallium/log.py</code> <pre><code>def configure_logger(*, log_level: int = DEF_LEVEL, logger: LogCallable | None = None, **kwargs: Any) -&gt; None:\n    \"\"\"Configure the global log level or replace the logger.\"\"\"\n    _LOG_SINGLETON.set_logger(logger=logger, log_level=log_level, **kwargs)\n</code></pre>"},{"location":"reference/corallium/log/#corallium.log.get_logger","title":"get_logger","text":"<pre><code>get_logger()\n</code></pre> <p>Return global logger.</p> Source code in <code>corallium/log.py</code> <pre><code>def get_logger() -&gt; _Logger:\n    \"\"\"Return global logger.\"\"\"\n    return _Logger()\n</code></pre>"},{"location":"reference/corallium/pretty_process/","title":"Pretty process","text":"<p>Track delegated processes with rich progress meters.</p> <p>Based on: https://www.deanmontgomery.com/2022/03/24/rich-progress-and-multiprocessing</p>"},{"location":"reference/corallium/pretty_process/#corallium.pretty_process-functions","title":"Functions","text":""},{"location":"reference/corallium/pretty_process/#corallium.pretty_process.____private","title":"____private","text":"<pre><code>____private(task_id, shared_progress, data)\n</code></pre> <p>Return True for testing a long running task.</p> <p>Note: this function can\u2019t be in the if-block below</p> Source code in <code>corallium/pretty_process.py</code> <pre><code>def ____private(task_id: int, shared_progress: DictProxy, data: list[_ItemT]) -&gt; Any:  # type: ignore[type-arg]\n    \"\"\"Return True for testing a long running task.\n\n    Note: this function can't be in the if-block below\n\n    \"\"\"\n    for _val in data:\n        sleep(1)\n        shared_progress[task_id] += 1\n    return True\n</code></pre>"},{"location":"reference/corallium/pretty_process/#corallium.pretty_process.pretty_process","title":"pretty_process","text":"<pre><code>pretty_process(delegated_task, *, data, num_workers=3, num_cpus=4)\n</code></pre> <p>Run a task in parallel to process all provided data.</p> <p>Uses <code>rich</code> to display pretty progress bars</p> PARAMETER DESCRIPTION <code>delegated_task</code> <p>must call <code>shared_progress[task_id] += 1</code> on each item in data</p> <p> TYPE: <code>_DelegatedTask</code> </p> <code>data</code> <p>the list of data to distribute</p> <p> TYPE: <code>list[_ItemT]</code> </p> <code>num_workers</code> <p>number of worker processes</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p> <code>num_cpus</code> <p>number of CPUs</p> <p> TYPE: <code>int</code> DEFAULT: <code>4</code> </p> RETURNS DESCRIPTION <code>Any</code> <p>List of results</p> Source code in <code>corallium/pretty_process.py</code> <pre><code>def pretty_process(\n    delegated_task: _DelegatedTask,  # type: ignore[type-arg]\n    *,\n    data: list[_ItemT],\n    num_workers: int = 3,\n    num_cpus: int = 4,\n) -&gt; Any:\n    \"\"\"Run a task in parallel to process all provided data.\n\n    Uses `rich` to display pretty progress bars\n\n    Args:\n        delegated_task: must call `shared_progress[task_id] += 1` on each item in data\n        data: the list of data to distribute\n        num_workers: number of worker processes\n        num_cpus: number of CPUs\n\n    Returns:\n        List of results\n\n    \"\"\"\n    # Docs: https://rich.readthedocs.io/en/latest/progress.html\n    columns: list[str | ProgressColumn] = [\n        '[progress.description]{task.description}',\n        BarColumn(),\n        '[progress.percentage]{task.percentage:&gt;3.0f}%',\n        TimeRemainingColumn(),\n        TimeElapsedColumn(),\n    ]\n    with Progress(*columns, refresh_per_second=1) as progress:  # noqa: SIM117 (Py&gt;3.9)\n        # Share state between process and workers\n        with multiprocessing.Manager() as manager:\n            shared_progress = manager.dict()\n            jobs = []\n            totals = {}\n            task_id_all = progress.add_task('[green]All jobs progress:')\n\n            with ProcessPoolExecutor(max_workers=num_workers) as executor:\n                for ix, chunk in enumerate(_chunked(data, count=num_cpus)):\n                    task_id = progress.add_task(f'task {ix}')\n                    shared_progress[task_id] = 0\n                    totals[task_id] = len(chunk)\n                    jobs.append(executor.submit(delegated_task, task_id, shared_progress, chunk))\n\n                # Update progress bar from shared state\n                remaining = len(jobs)\n                while remaining:\n                    n_done = 0\n                    for task_id, latest in shared_progress.items():\n                        n_done += latest\n                        progress.update(task_id, completed=latest, total=totals[task_id])\n                    progress.update(task_id_all, completed=n_done, total=len(data))\n                    remaining = len(jobs) - sum(job.done() for job in jobs)\n\n                # Collect results and catch and errors\n                return [job.result() for job in jobs]\n</code></pre>"},{"location":"reference/corallium/shell/","title":"Shell","text":"<p>Run shell commands.</p>"},{"location":"reference/corallium/shell/#corallium.shell-functions","title":"Functions","text":""},{"location":"reference/corallium/shell/#corallium.shell.capture_shell","title":"capture_shell","text":"<pre><code>capture_shell(cmd, *, timeout=120, cwd=None, printer=None)\n</code></pre> <p>Run shell command, return the output, and optionally print in real time.</p> <p>Inspired by: https://stackoverflow.com/a/38745040/3219667</p> PARAMETER DESCRIPTION <code>cmd</code> <p>shell command</p> <p> TYPE: <code>str</code> </p> <code>timeout</code> <p>process timeout. Defaults to 2 minutes</p> <p> TYPE: <code>int</code> DEFAULT: <code>120</code> </p> <code>cwd</code> <p>optional path for shell execution</p> <p> TYPE: <code>Path | None</code> DEFAULT: <code>None</code> </p> <code>printer</code> <p>optional callable to output the lines in real time</p> <p> TYPE: <code>Callable[[str], None] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>str</code> <p>stripped output</p> <p> TYPE: <code>str</code> </p> RAISES DESCRIPTION <code>CalledProcessError</code> <p>if return code is non-zero</p> Source code in <code>corallium/shell.py</code> <pre><code>def capture_shell(\n    cmd: str,\n    *,\n    timeout: int = 120,\n    cwd: Path | None = None,\n    printer: Callable[[str], None] | None = None,\n) -&gt; str:\n    \"\"\"Run shell command, return the output, and optionally print in real time.\n\n    Inspired by: https://stackoverflow.com/a/38745040/3219667\n\n    Args:\n        cmd: shell command\n        timeout: process timeout. Defaults to 2 minutes\n        cwd: optional path for shell execution\n        printer: optional callable to output the lines in real time\n\n    Returns:\n        str: stripped output\n\n    Raises:\n        CalledProcessError: if return code is non-zero\n\n    \"\"\"\n    LOGGER.debug('Running', cmd=cmd, timeout=timeout, cwd=cwd, printer=printer)\n\n    start = time()\n    lines = []\n    with subprocess.Popen(\n        cmd,\n        cwd=cwd,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.STDOUT,\n        universal_newlines=True,\n        shell=True,\n    ) as proc:\n        if not (stdout := proc.stdout):\n            raise NotImplementedError('Failed to read stdout from process.')\n        return_code = None\n        while return_code is None:\n            if timeout != 0 and time() - start &gt;= timeout:\n                proc.kill()\n                break\n            if line := stdout.readline():\n                lines.append(line)\n                if printer:\n                    printer(line.rstrip())\n            else:\n                return_code = proc.poll()\n\n    output = ''.join(lines)\n    if return_code != 0:\n        raise subprocess.CalledProcessError(returncode=return_code or 404, cmd=cmd, output=output)\n    return output\n</code></pre>"},{"location":"reference/corallium/shell/#corallium.shell.capture_shell_async","title":"capture_shell_async  <code>async</code>","text":"<pre><code>capture_shell_async(cmd, *, timeout=120, cwd=None)\n</code></pre> <p>Run a shell command asynchronously and return the output.</p> <pre><code>print(asyncio.run(capture_shell_async('ls ~/.config')))\n</code></pre> PARAMETER DESCRIPTION <code>cmd</code> <p>shell command</p> <p> TYPE: <code>str</code> </p> <code>timeout</code> <p>process timeout. Defaults to 2 minutes</p> <p> TYPE: <code>int</code> DEFAULT: <code>120</code> </p> <code>cwd</code> <p>optional path for shell execution</p> <p> TYPE: <code>Path | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>str</code> <p>stripped output</p> <p> TYPE: <code>str</code> </p> Source code in <code>corallium/shell.py</code> <pre><code>async def capture_shell_async(cmd: str, *, timeout: int = 120, cwd: Path | None = None) -&gt; str:\n    \"\"\"Run a shell command asynchronously and return the output.\n\n    ```py\n    print(asyncio.run(capture_shell_async('ls ~/.config')))\n    ```\n\n    Args:\n        cmd: shell command\n        timeout: process timeout. Defaults to 2 minutes\n        cwd: optional path for shell execution\n\n    Returns:\n        str: stripped output\n\n    \"\"\"\n    LOGGER.debug('Running', cmd=cmd, timeout=timeout, cwd=cwd)\n    return await asyncio.wait_for(_capture_shell_async(cmd=cmd, cwd=cwd), timeout=timeout)\n</code></pre>"},{"location":"reference/corallium/shell/#corallium.shell.run_shell","title":"run_shell","text":"<pre><code>run_shell(cmd, *, timeout=120, cwd=None)\n</code></pre> <p>Run a shell command without capturing the output.</p> PARAMETER DESCRIPTION <code>cmd</code> <p>shell command</p> <p> TYPE: <code>str</code> </p> <code>timeout</code> <p>process timeout. Defaults to 2 minutes</p> <p> TYPE: <code>int</code> DEFAULT: <code>120</code> </p> <code>cwd</code> <p>optional path for shell execution</p> <p> TYPE: <code>Path | None</code> DEFAULT: <code>None</code> </p> Source code in <code>corallium/shell.py</code> <pre><code>def run_shell(cmd: str, *, timeout: int = 120, cwd: Path | None = None) -&gt; None:\n    \"\"\"Run a shell command without capturing the output.\n\n    Args:\n        cmd: shell command\n        timeout: process timeout. Defaults to 2 minutes\n        cwd: optional path for shell execution\n\n    \"\"\"\n    LOGGER.debug('Running', cmd=cmd, timeout=timeout, cwd=cwd)\n\n    subprocess.run(\n        cmd,\n        timeout=timeout or None,\n        cwd=cwd,\n        stdout=sys.stdout,\n        stderr=sys.stderr,\n        check=True,\n        shell=True,\n    )\n</code></pre>"},{"location":"reference/corallium/loggers/plain_printer/","title":"Plain printer","text":"<p>Generic Log Writer.</p>"},{"location":"reference/corallium/loggers/plain_printer/#corallium.loggers.plain_printer-functions","title":"Functions","text":""},{"location":"reference/corallium/loggers/plain_printer/#corallium.loggers.plain_printer.plain_printer","title":"plain_printer","text":"<pre><code>plain_printer(message, *, is_header, _this_level, _is_text, **kwargs)\n</code></pre> <p>Print log message.</p> Source code in <code>corallium/loggers/plain_printer.py</code> <pre><code>def plain_printer(\n    message: str,\n    *,\n    is_header: bool,  # noqa: ARG001\n    _this_level: int,\n    _is_text: bool,\n    # Logger-specific parameters that need to be initialized with partial(...)\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"Print log message.\"\"\"\n    values = ' '.join([f'{key}={value}' for key, value in kwargs.items()])\n    print(f'{message} {values}'.strip())  # noqa: T201\n</code></pre>"},{"location":"reference/corallium/loggers/rich_printer/","title":"Rich printer","text":"<p>Rich Printer.</p>"},{"location":"reference/corallium/loggers/rich_printer/#corallium.loggers.rich_printer-classes","title":"Classes","text":""},{"location":"reference/corallium/loggers/rich_printer/#corallium.loggers.rich_printer-functions","title":"Functions","text":""},{"location":"reference/corallium/loggers/rich_printer/#corallium.loggers.rich_printer.rich_printer","title":"rich_printer","text":"<pre><code>rich_printer(message, *, is_header, _this_level, _is_text, _console, _styles, _keys_on_own_line=None, **kwargs)\n</code></pre> <p>Print log message with rich formatting.</p> Source code in <code>corallium/loggers/rich_printer.py</code> <pre><code>def rich_printer(\n    message: str,\n    *,\n    is_header: bool,\n    _this_level: int,\n    _is_text: bool,\n    # Logger-specific parameters that need to be initialized with partial(...)\n    _console: Console,\n    _styles: Styles,\n    _keys_on_own_line: list[str] | None = None,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"Print log message with rich formatting.\"\"\"\n    text = Text()\n    if _is_text:\n        if is_header:\n            print()  # noqa: T201\n        text.append(f'{message}', style=_styles.message)\n    else:\n        timestamp = kwargs.pop('timestamp', datetime.now())  # noqa: DTZ005\n        text.append(f'{timestamp: &lt;28} ', style=_styles.timestamp)\n        text.append('[', style=_styles.timestamp)\n        level_style = _styles.get_style(level=_this_level)\n        text.append(f'{get_name(level=_this_level): &lt;7}', style=level_style)\n        text.append(']', style=_styles.timestamp)\n        text.append(f' {message}', style=_styles.message)\n\n    full_lines = []\n    for key in _keys_on_own_line or []:\n        if line := kwargs.pop(key, None):\n            full_lines.append((key, line))  # noqa: PERF401\n    for key, value in kwargs.items():\n        text.append(f' {key}=', style=_styles.key)\n        text.append(f'{value!s}', style=_styles.value)\n    _console.print(text)\n    for key, line in full_lines:\n        new_text = Text()\n        new_text.append(f' \u221f {key}', style=_styles.key)\n        new_text.append(f': {line}', style=_styles.value_own_line)\n        _console.print(new_text)\n\n    if _this_level == logging.CRITICAL:\n        term_width, _height = shutil.get_terminal_size((100, 50))\n        _console.print_exception(\n            extra_lines=1,\n            max_frames=6,\n            show_locals=False,\n            width=term_width,\n        )\n</code></pre>"},{"location":"reference/corallium/loggers/styles/","title":"Styles","text":"<p>Styles.</p>"},{"location":"reference/corallium/loggers/styles/#corallium.loggers.styles-classes","title":"Classes","text":""},{"location":"reference/corallium/loggers/styles/#corallium.loggers.styles.Colors","title":"Colors  <code>dataclass</code>","text":"<p>Based on Tokyo Night: https://github.com/folke/tokyonight.nvim#-extras.</p> Source code in <code>corallium/loggers/styles.py</code> <pre><code>@dataclass\nclass Colors:\n    \"\"\"Based on Tokyo Night: https://github.com/folke/tokyonight.nvim#-extras.\"\"\"\n\n    level_error: str = '#e77d8f'\n    level_warn: str = '#d8b172'\n    level_info: str = '#a8cd76'\n    level_debug: str = '#82a1f1'\n    level_fallback: str = '#b69bf1'\n</code></pre>"},{"location":"reference/corallium/loggers/styles/#corallium.loggers.styles.Styles","title":"Styles  <code>dataclass</code>","text":"<p>Inspired by <code>loguru</code> and <code>structlog</code> and used in <code>tail-jsonl</code>.</p> <p>https://rich.readthedocs.io/en/latest/style.html</p> <p>Inspired by: https://github.com/Delgan/loguru/blob/07f94f3c8373733119f85aa8b9ca05ace3325a4b/loguru/_defaults.py#L31-L73</p> <p>And: https://github.com/hynek/structlog/blob/bcfc7f9e60640c150bffbdaeed6328e582f93d1e/src/structlog/dev.py#L126-L141</p> Source code in <code>corallium/loggers/styles.py</code> <pre><code>@dataclass\nclass Styles:\n    \"\"\"Inspired by `loguru` and `structlog` and used in `tail-jsonl`.\n\n    https://rich.readthedocs.io/en/latest/style.html\n\n    Inspired by: https://github.com/Delgan/loguru/blob/07f94f3c8373733119f85aa8b9ca05ace3325a4b/loguru/_defaults.py#L31-L73\n\n    And: https://github.com/hynek/structlog/blob/bcfc7f9e60640c150bffbdaeed6328e582f93d1e/src/structlog/dev.py#L126-L141\n\n    \"\"\"\n\n    timestamp: str = '#8DAAA1'\n    message: str = 'bold'\n\n    colors: Colors | None = None\n\n    # triadic from: https://coolors.co/a28eab\n    key: str = '#8DAAA1'\n    value: str = '#A28EAB'\n    value_own_line: str = '#AAA18D'\n\n    @classmethod\n    def from_dict(cls, data: dict) -&gt; Styles:  # type: ignore[type-arg]\n        \"\"\"Return Self instance.\"\"\"\n        if colors := (data.pop('colors', None) or None):\n            colors = Colors(**colors)\n        return cls(**data, colors=colors)\n\n    def get_style(self, *, level: int) -&gt; str:\n        \"\"\"Return the right style for the specified level.\"\"\"\n        if not self.colors:\n            self.colors = Colors()\n        return {\n            logging.CRITICAL: self.colors.level_error,\n            logging.ERROR: self.colors.level_error,\n            logging.WARNING: self.colors.level_warn,\n            logging.INFO: self.colors.level_info,\n            logging.DEBUG: self.colors.level_debug,\n        }.get(level, self.colors.level_fallback)\n</code></pre>"},{"location":"reference/corallium/loggers/styles/#corallium.loggers.styles.Styles-functions","title":"Functions","text":""},{"location":"reference/corallium/loggers/styles/#corallium.loggers.styles.Styles.from_dict","title":"from_dict  <code>classmethod</code>","text":"<pre><code>from_dict(data)\n</code></pre> <p>Return Self instance.</p> Source code in <code>corallium/loggers/styles.py</code> <pre><code>@classmethod\ndef from_dict(cls, data: dict) -&gt; Styles:  # type: ignore[type-arg]\n    \"\"\"Return Self instance.\"\"\"\n    if colors := (data.pop('colors', None) or None):\n        colors = Colors(**colors)\n    return cls(**data, colors=colors)\n</code></pre>"},{"location":"reference/corallium/loggers/styles/#corallium.loggers.styles.Styles.get_style","title":"get_style","text":"<pre><code>get_style(*, level)\n</code></pre> <p>Return the right style for the specified level.</p> Source code in <code>corallium/loggers/styles.py</code> <pre><code>def get_style(self, *, level: int) -&gt; str:\n    \"\"\"Return the right style for the specified level.\"\"\"\n    if not self.colors:\n        self.colors = Colors()\n    return {\n        logging.CRITICAL: self.colors.level_error,\n        logging.ERROR: self.colors.level_error,\n        logging.WARNING: self.colors.level_warn,\n        logging.INFO: self.colors.level_info,\n        logging.DEBUG: self.colors.level_debug,\n    }.get(level, self.colors.level_fallback)\n</code></pre>"},{"location":"reference/corallium/loggers/styles/#corallium.loggers.styles-functions","title":"Functions","text":""},{"location":"reference/corallium/loggers/styles/#corallium.loggers.styles.get_level","title":"get_level","text":"<pre><code>get_level(*, name)\n</code></pre> <p>Return the logging level based on the provided name.</p> Source code in <code>corallium/loggers/styles.py</code> <pre><code>def get_level(*, name: str) -&gt; int:\n    \"\"\"Return the logging level based on the provided name.\"\"\"\n    return {\n        'ERROR': logging.ERROR,\n        'WARNING': logging.WARNING,\n        'WARN': logging.WARNING,\n        'INFO': logging.INFO,\n        'DEBUG': logging.DEBUG,\n    }.get(name.upper(), logging.NOTSET)\n</code></pre>"},{"location":"reference/corallium/loggers/styles/#corallium.loggers.styles.get_name","title":"get_name","text":"<pre><code>get_name(*, level)\n</code></pre> <p>Return the logging name based on the provided level.</p> <p>https://docs.python.org/3.11/library/logging.html#logging-levels</p> Source code in <code>corallium/loggers/styles.py</code> <pre><code>def get_name(*, level: int) -&gt; str:\n    \"\"\"Return the logging name based on the provided level.\n\n    https://docs.python.org/3.11/library/logging.html#logging-levels\n\n    \"\"\"\n    return {\n        logging.CRITICAL: 'EXCEPTION',\n        logging.ERROR: 'ERROR',\n        logging.WARNING: 'WARNING',\n        logging.INFO: 'INFO',\n        logging.DEBUG: 'DEBUG',\n        logging.NOTSET: 'NOTSET',\n    }.get(level, '')\n</code></pre>"}]}